#!/usr/bin/env ruby

require_relative '../lib/pak'

require 'gli'

# Cli main parser
class Cli
  extend GLI::App

  # cli options
  subcommand_option_handling :normal
  arguments :strict

  # information
  program_desc 'a handy runner of distributions packages manager commands. '
  version Pak::VERSION

  # commands base
  COMMANDS = Pak::Commands.new

  desc 'install package(s) from repositories'
  arg_name 'package(s) name'
  command :install do |c|
    c.arg 'arguments'
    c.action do |_, _, args|
      COMMANDS.commands.install args
    end
  end

  desc 'remove one or more installed packages'
  arg_name 'package(s) name'
  command :remove do |c|
    c.action do |_, _, args|
      COMMANDS.remove args
    end
  end

  desc 'search for matching packages of term'
  arg_name 'package name'
  command :search do |c|
    c.action do |_, _, args|
      COMMANDS.search args[0]
    end
  end

  desc 'update database'
  arg_name ''
  command :update do |c|
    c.action do
      COMMANDS.update
    end
  end

  desc 'upgrade packages'
  arg_name ''
  command :upgrade do |c|
    c.arg 'arguments'
    c.action do
      COMMANDS.upgrade
    end
  end

  desc 'clean system residual packages dependencies'
  arg_name ''
  command :clean do |c|
    c.action do |_, _, args|
      COMMANDS.clean args
    end
  end

  desc 'download package binary'
  arg_name 'package name'
  command :download do |c|
    c.action do |_, _, args|
      COMMANDS.download args
    end
  end

  desc 'list installed packages'
  arg_name ''
  command :installed do |c|
    c.action do |_, _, args|
      COMMANDS.installed args
    end
  end

  desc 'view info about a specific package'
  arg_name 'package name'
  command :info do |c|
    c.action do |_, _, args|
      COMMANDS.info args
    end
  end

  desc 'fix system package manager issues'
  arg_name ''
  command :fix do |c|
    c.action do |_, _, args|
      COMMANDS.fix args
    end
  end
end

exit Cli.run(ARGV)
